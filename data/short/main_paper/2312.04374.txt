INTRODUCTION
As the field of autonomous vehicles has grown, the ma-
jority of research has been directed towards common driving
situations. However, to enhance safety and performance, it is
crucial to address the challenges presented by extreme driving
environments. A quickly progressing area of research, au-
tonomous racing, offers a valuable setting for this exploration.
Recent advances in autonomous racing have been summa-
rized comprehensively in [1]. Inspired by high-speed racing,
competitions such as the Indy Autonomous Challenge [2],
F1tenth [3], and Formula Driverless [4] have emerged where
scaled and full-size driverless racecars compete to achieve the
fastest lap times and overtake each other at speeds exceeding
280km h−1. The control software for autonomous racing must
navigate racecars at extreme speeds and dynamic limits, a feat
easily handled by skilled human racers but challenging for
current low-speed optimized autonomous driving systems.
An essential aspect of autonomous racing is the precise
modeling of a vehicle’s dynamic behavior. This encompasses
using linearized or nonlinear differential equations to capture
tire dynamics, aerodynamics, suspension, steering,
and drivetrain physics. While kinematic models focus on
vehicle geometry, dynamic models delve deeper, estimating the
acting forces to predict future movement, especially crucial in
racing’s nonlinear regions characterized by rapid vehicle state
changes and elevated dynamic loads. Obtaining precise coef-
ficient values for modeling components like tires, suspension
systems, and drivetrains is crucial, but extremely challenging.
Determining tire coefficients (e.g. Pajecka coefficients [5]) in-
volves extensive testing with specialized equipment (tire rigs)
and significant time [6]. Additionally, calculating a racecar’s
moment of inertia is a laborious task necessitating vehicle
disassembly, precise component weighing and positioning, and
the use of CAD software or multi-body physics simulations.
Frequent recalculations are necessary to accommodate vary-
ing vehicle setups, track conditions, and tire wear, adding
complexity to vehicle dynamics modeling, which is further
complicated by the common omission of drivetrain dynamics,
leading to incomplete models and suboptimal performance.
Deep neural networks (DNNs) have proven adept at captur-
ing complex nonlinear dynamical effects [7], offering a simpler
alternative to physics-based models as they obviate the need
for extra testing equipment. Nevertheless,
their substantial
computational demands limit their integration for real-time
model-predictive control (MPC), and they can often generate
outputs unattainable by the actual system. Consequentially,
this has sparked increasing interest in physics-informed neural
networks (PINNs). For autonomous vehicles, an example of
this approach is the Deep Pajecka Model [8]. However, this
model has limitations such as reliance on sampling-based
control, unconstrained Pacejka coefficient estimations, and not
being tested on real data. We present Deep Dynamics, a PINN-
based approach that to our best knowledge is the first model of
its kind suited for vehicle dynamics modeling in autonomous
racing - a domain distinctly marked by high accelerations
and high speeds. This paper makes the following research
contributions:
1) We introduce Deep Dynamics - A PINN that can estimate
the Pajecka tire coefficients, drivetrain coefficients, and
moment of inertia that capture the complex and varying
dynamics of an autonomous racecar.
2) We introduce the Physics Guard layer designed to ensure
that the model coefficients consistently remain within
their physically meaningful ranges. This layer aligns the
predictions of the PINN to adhere to the underlying
physics governing vehicle dynamics.
3) We examine both open-loop and closed-loop perfor-
mance, utilizing a blend of simulation data and real-world
data gathered from a full-scale autonomous racing car
competing in the Indy Autonomous Challenge.
Our findings affirm that Deep Dynamics can effectively
integrate with model-predictive control-based (MPC) trajec-
tory following methods, all while leveraging the advantages
of data-driven vehicle modeling without the complications
associated with physics-based modeling.
II. RELATED WORK
Vehicle dynamics modeling is a thoroughly investigated
for both passenger autonomous driving and au-
tonomous racing. Physics-based vehicle dynamics models can
vary greatly in complexity, ranging from simple point-mass to
single-track (bicycle) models, to complex multi-body models
[9]. Kinematic and dynamic single-track models are commonly
used for vehicle dynamics modeling because they offer a good
balance of simplicity and accuracy [10]. However, the accuracy
of such models correlates with the accuracy of the model
coefficients, which are often difficult to identify and tune [11].
Researchers have explored a variety of system identification
approaches to learn the parameters of physics models through
observations of the vehicle’s motion. [12] describes a method
to estimate the coefficients for a vehicle’s drivetrain model and
[13] focuses on identifying tire coefficients. Such methods of-
ten make a simplifying assumption that the model coefficients
are time-invariant, which does not hold true in autonomous
racing where coefficients may vary due to changes in racecar
setups or tire wear throughout a race. Hybrid models that use
a combination of data-driven and physics-based approaches
have also been proposed. [14]–[16] use Gaussian Processes to
correct the predictions of a simple physics model to match
observed states. [17] addresses the same problem using a
DNN. These approaches can capture time-variant dynamics but
lack interpretability and provide no guarantees that corrected
predictions will make physical sense.
like in [18] and [19],
Purely data-driven models,
vehicle dynamics using historical observations of the vehicle’s
state and control inputs to train a DNN. [20] proposed the
use of a recurrent neural network with a Gated Recurrent
Unit (GRU) mechanism to accomplish the same task. These
methods have shown the ability to perform well within the
distribution of data they were trained on but, like as is the case
with supervised machine learning approaches, they struggle
to generalize on out-of-distribution data. The complexity and
non-linearity of DNNs also limit
the use of such models
for model-based predictive control. Additionally, while purely
data-driven models are great at learning complex non-linear
patterns in the data, they are not designed to be consistent
with the laws of physics and can produce state predictions
that the vehicle cannot physically realize.
Recently, Physics-Informed Neural Networks (PINNs) for
vehicle dynamics have been gaining traction as they adeptly
merge the strengths of both physics-based and data-driven
models. In the study by [21], PINNs were employed to
model lateral dynamics in ships and quadrotors. Similarly, [22]
trained a PINN to determine the dynamics of an unmanned
surface vehicle. The closest related work to ours is the Deep
Pacejka Model (DPM) introduced in [8], which estimates tire
model coefficients for autonomous vehicles based on historical
states and control inputs. However, as detailed in Section IV-A,
the DPM bears inherent limitations that make it unsuitable
for use in autonomous racing applications. Our research aims
to address these limitations, introducing a new PINN model
suitable for implementation in a real autonomous racecar.
State Variable
Horizontal Position (m)
Vertical Position (m)
Inertial Heading (rad)
Longitudinal Velocity (m s−1)
Lateral Velocity (m s−1)
Yaw Rate (rad s−1)
Throttle (%)
Steering Angle (rad)
Input Variable
Throttle Change (%)
Steering Change (rad)
State Equation
xt+1 = xt + (vxt cos θt − vyt sin θt)Ts
yt+1 = yt + (vxt sin θt + vyt cos θt)Ts
θt+1 = θt + (ωt)Ts
vxt+1 = vxt + 1
vyt+1 = vyt + 1
ωt+1 = ωt + 1
Tt+1 = Tt + ∆T
δt+1 = δt + ∆δ
m (Frx − Ff y sin δt + mvytωt)Ts
m (Fry + Ff y cos δt − mvxtωt)Ts
(Ff ylf cos δt − Frylr)Ts
Pacejka Tire Model
αf = δ − arctan ωlf +vy
αr = arctan ωlr−vy
Ff y = Kf + Df (sin (Cf arctan (Bf αf − Ef (Bf αf − arctan (Bf αf )))))
Fry = Kr + Dr (sin (Cr arctan (Brαr − Er (Brαr − arctan (Brαr)))))
Drivetrain Model
Frx = (Cm1 − Cm2vx)T − Cr0 − Cdvx
Pacejka Coefficients
Bf /r, Cf /r, Df /r, Ef /r, Gf /r, Kf /r
Drivetrain Coefficients
Cm1, Cm2, Cr0, Cd
Vehicle Geometry
Iz, lf , lr, m
DYNAMIC SINGLE-TRACK VEHICLE MODEL
III. PROBLEM STATEMENT
We begin with a brief overview of vehicle dynamics fol-
lowed by the problem formulation.
A. Dynamic Single-Track Vehicle Model
We model the autonomous racecar using a dynamic single-
track vehicle model [10], with the state variables, discrete-
time state equations, and notations listed in Table I. The
accompanying free-body diagram for this model is shown
in Figure 1. At time t, the states of the system are St =
[xt, yt, θt, vxt, vyt, ωt, Tt, δt] ∈ R8, and the control
Ut consist of changes to the vehicle’s throttle and steering
i.e. Ut = [∆Tt, ∆δt] ∈ R2. The single-track model (also
known as the bicycle model) makes the assumption that the
dynamics of the car can be described based on two virtual
wheels located along the longitudinal axis of the racecar.
A drivetrain model [14] estimates the longitudinal force at
the rear wheels, Frx, using drivetrain coefficients, Cm1 and
Cm2, the rolling resistance Cr, and the drag coefficient Cd.
The Pacejka Magic Formula tire model [5] estimates the
tire forces on the front and rear wheels, Ff y and
Fry, inflicted by the vehicle’s movement and steering. The
Pacejka model first calculates the sideslip angles for the front
and rear wheels, αf and αr, using state St and the distance
between the vehicle’s center of gravity to the front and rear
axles, lf and lr. The sideslip angles and sets of tire coeffi-
cients for the front and rear wheels, (B, C, D, E, G, K)f /r,
are then used to estimate the lateral tire forces (Table I).
Additional model coefficients include the mass, m, and mo-
ment of inertia, Iz, of the vehicle. The set of model coef-
ficients Φ = {m, lf , lr, Bf /r, Cf /r, Df /r, Ef /r, Gf /r, Kf /r,
Cm1, Cm2, Cr0, Cd, Iz} ∈ R20 together with the state St and
the control input Ut fully describe the system’s dynamics.
Modeling Assumptions. We make the following modeling
assumptions for the dynamic single-track model used in this
work: 1) The model assumes that the racecar drives in 2D
space despite the banking on real-world racetracks. The state
equations can be modified to accommodate the banking angle
of the racetrack. 2) We assume that there is no significant
actuation delay for the control inputs ∆T , and ∆δ. Actuation
delays can be accounted for in the model, therefore this is
just a simplifying assumption. 3) We assume that three of
Fig. 1. The dynamic single-track vehicle model.
Fig. 2. The Deep Dynamics Model uses a DNN to indirectly learn a
vehicle’s Pacejka coefficients, drivetrain coefficients, and moment of inertia
using historical state and control inputs.
the model coefficients within Φ are directly measurable and
belong to the set of known coefficients, Φk. These include
the mass, m, and geometric properties, lr and lf , which can
be measured in a typical garage with corner weight scales.
The remaining coefficients belong to the set of unknown
coefficients, Φu, because they are difficult to obtain without
cost and time-intensive procedures. Therefore, Φ = {Φk∪Φu},
where Φk = {m, lf , lr} and Φu = {Bf /r, Cf /r, Df /r, Ef /r,
Gf /r, Kf /r, Cm1, Cm2, Cr0, Cd, Iz}. Although the precise
values of Φu are unknown, we posit that each parameter
is bounded within a known, physically meaningful nominal
range, denoted as Φ
¯ u ≤ Φu ≤ ¯Φu.
B. Vehicle Dynamics Identification Problem
Consistent with the definitions in [8], [20],
the evolution of the model states St =
established that
[xt, yt, θt, vxt, vyt, ωt, Tt, δt] can be completely described by
the velocity states vx, vy, and ω. This can be seen in Ta-
ble I, as the state equations for x, y, θ are fully depen-
dent on the velocity terms. Hence, for the vehicle dynamics
identification task, we exclusively utilize the state vector
Xt = [vxt, vyt, ωt, Tt, δt] ∈ R5 moving forward. Given a
dataset D = [[X1, U1], [X2, U2], ..., [XN , UN ]], with N state-
input observations, we first split the data into two disjoint
sets D = {Dtrain ∪ Dtest}, where Dtrain is used for model
identification and Dtest is used for model verification. Our goal
is to construct a predictive model f that, given the current state
Xt, input Ut, known coefficients Φk, and estimated unknown
coefficients ˆΦut, forecasts the subsequent state:
ˆXt+1 = f (Xt, Ut, Φk, ˆΦut)
The unknown coefficients ˆΦut represent our current estimates
of the unknown parameters Φu. We know that f can be
realized through the state equations in Table I, therefore the
accuracy of the model i.e. the mismatch between the model
output ˆXt+1 and the observed Xt+1 from D is governed
by the precision of the unknown coefficient estimates ˆΦut.
Given the nominal ranges for the unknown model coefficients
¯ u ≤ Φu ≤ ¯Φu, model f , training data Dtrain with N train
samples, the formal problem can be stated as:
(Xi − ˆXi)2 s.t. Φ
¯ u ≤ ˆΦu ≤ ¯Φu
We approach the estimation of ˆΦut through a PINN that is
intrinsically informed by the nominal ranges of Φu.
IV. DEEP DYNAMICS
Physics-informed neural networks have emerged as an effec-
tive approach for modeling non-linear dynamic behaviors. The
Deep Pacejka Model (DPM) [8] uses PINNs for autonomous
driving, yet its limitations are pronounced when applied to the
context of autonomous racing.
A. Limitations of the Deep Pacejka Model
The DPM uses a neural network to only estimate the Pacejka
coefficients {Bf /r, Cf /r, Df /r, Ef /r} ⊂ Φu, and rather than
using a physics-based drivetrain model, directly estimates the
longitudinal force, Frx, for an autonomous vehicle given a
history of the vehicle’s state and control inputs. The DNN
outputs are then used with the dynamic bicycle model state
equations to predict the vehicle’s subsequent observed state,
Xt+1. Backpropagating results in a network that learns Pacejka
coefficients and a purely data-driven drivetrain model that
capture the vehicle’s dynamics.
The DPM suffers from several limitations. First, the DPM
solves an unconstrained version of the problem in Equation
2, i.e. there are no bounds on ˆΦu. This can cause DPM to
produce coefficients outside of the nominal ranges Φ
¯Φu, which could result
in non-sensical predictions of the
vehicle’s state. Second, the DPM assumes precise knowledge
of the vehicle’s moment of inertia, Iz. This is a very strong
assumption because the precise value of Iz requires knowledge
of the weight distribution of the car. In addition, the DPM does
not have a drivetrain model as there is no learned relation
between the vehicle throttle, T , and longitudinal wheel force,
Frx, which limits the DPM to using PID throttle control to
track Vdes set by sampling-based MPC rather than directly
controlling T . More importantly, the Deep Pacejka Model was
designed for low-speed autonomous driving and not for a high-
speed racing environment.
B. Deep Dynamics
We propose the Deep Dynamics Model (DDM), a PINN
capable of estimating the unknown coefficients for a single-
track dynamical model (Section III-A) that are guaranteed to
¯ u and ¯Φu.
lie within their physically meaningful ranges, Φ
The model architecture for the DDM is shown in Figure 2.
The DDM is given a history of length τ of vehicle states
and control inputs, [[Xt−τ , Ut−τ ], ..., [Xt, Ut]], which is then
fed through the hidden layers of a DNN. We have introduced
a Physics Guard layer which applies a Sigmoid activation
function to the output, z, of the last hidden layer and scales the
result to produce ˆΦut between the bounds Φ
ˆΦu = σ(z) · ( ¯Φu − Φ
¯ u and Φ
A Sigmoid function was used for simplicity, but this mecha-
nism could be implemented using any activation function with
finite boundaries. The estimated coefficients and single-track
model state equations are then used to predict ˆXt+1, and the
backpropagated loss function is computed using
t+1 − ˆX (i)
across the state variables [vx, vy, ω]. The states T and δ
were not used in the loss function as the change in these
states is determined by the control inputs ∆T and ∆δ. In
contrast to the DPM, the architecture of the DDM allows for
longitudinal control using an MPC solver due to the inclusion
of a physics-based drivetrain model. Additionally, the DDM
does not assume prior knowledge of the vehicle’s moment of
inertia, Iz. Finally, the Physics Guard prevents the DDM from
estimating non-sensical single-track model coefficients.
C. Model-Predictive Control with Deep Dynamics
For closed-loop testing, we use MPC to control the vehicle’s
steering and throttle. An optimal raceline, W ∈ Rn×2, contain-
ing a sequence of n reference points wi = [xref,i, yref,i] ∈ R2 is
tracked using MPC by solving for the optimal control inputs,
U0, ..., UH−1, that minimize the cost function
U0,...,UH−1
xh − xref,h
yh − yref,h
across the forward prediction horizon H. The first term, the
tracking cost, penalizes deviations from the optimal raceline
using the cost matrix Q ∈ R2×2. The second term,
actuation cost, penalizes rapid steering and throttle changes
using the cost matrix R ∈ R2×2. Once the optimal series of
control inputs U0, ..., UH−1 have been derived, the controller
can enact U0 and repeat this procedure.
At time t, Deep Dynamics is used to predict the vehicle’s
trajectory over the forward horizon, H, by first estimating
model coefficients ˆΦut using the observed states and control
inputs from times t − τ to t. These coefficients are held
constant and used by MPC to propagate the predicted state
of the vehicle from time t to t + H. Holding ˆΦut constant
throughout H allows an MPC solver to compute steering and
throttle commands that minimize Equation 5 without having
to differentiate through the DDM’s hidden layers, making it
feasible to run in real-time.
V. EXPERIMENTS & RESULTS
A. Training and Testing Datasets
The open-loop performance of the Deep Dynamics Model
and Deep Pacejka Model was evaluated on two both real and
simulated data (shown in Figure 3). Real world data Dreal was
compiled from a full-scale Indy autonomous racecar [23]. State
information was sampled at a rate of 25 Hz from a 100 Hz
Extended Kalman Filter which fuses measurements from two
GNSS signals with RTK corrections and their IMU units. The
training data, Dtrain
real consisting of 13,418 samples was collected
at the Putnam Park road course in Indianapolis, while the
test set, Dtest
real, was curated from laps at the Las Vegas Motor
Speedway and consists of 10,606 samples. Simulation dataset,
Dsim, contains ground-truth vehicle state information from laps
driven in a 1:43 scale racecar simulator [14], where the ground
truth coefficient values Φ are known. Data was collected from
two different track configurations (Figure 3 Bottom) at 50 Hz
using a pure-pursuit controller to drive the vehicle along a
raceline. Track 1 was used to create the training dataset, Dtrain
and Track 2 was used to create the testing dataset, Dtest
both consisting of 1,000 samples.
B. Nominal Model Coefficient Ranges
The Physics Guard layer requires bounds Φ
¯ u and ¯Φu for
each of the model coefficients Φu estimated by Deep Dynam-
ics. For the simulator, the ground truth is known and therefore,
nominal ranges for the drivetrain coefficients and moment of
inertia were created artificially by halving and doubling the
ground-truth value for each coefficient. The ranges for Pacejka
coefficients were set using the bounds described in [24]. For
the real vehicle, the range for the moment of inertia, Iz, was
set to 500−2, 000 kg m2 based on an estimate of 1, 000 kg m2
provided by Dallara. The the drag coefficient, Cd, and rolling
resistance, Cr0, were given ranges from 0.1 − 1.0 kg m−1
and 0.1 − 1.4 N, respectively, based on values estimated in
[25]. The range for drivetrain coefficient Cm1 was set to be
500 − 2000 N based on the engine specification for Indy cars
and the coefficient range for Cm2 was set to 0.0 − 1.0 kg s−1
to ensure force lost to engine friction would remain relatively
small to the force generated.
C. Evaluation Metrics
The root-mean-square error (RMSE) and maximum error
(ϵmax) for the predicted longitudinal velocity, vx,
velocity, vy, and yaw rate, ω, were measured to compare each
model’s one step prediction performance. In addition, we also
generate horizon predictions using the estimated coefficients
of each model and compute the average displacement error
(ADE) and final displacement error (FDE) [26]. A time
horizon of 300ms was used for generating trajectories on Dtest
and a horizon of 600ms was used for Dtest
Fig. 3. A real-world, full-scale autonomous racecar was used to collect data at
the Putnam Park Road Course and Las Vegas Motor Speedway. In simulation,
laps were driven on Track 1 and Track 2.
Displacement (m)
OPEN-LOOP MODEL PERFORMANCE
D. Open-Loop Testing
To highlight the inadequacy of presuming precise knowl-
edge of the ground truth moment of inertia, Iz, we trained
three distinct iterations of the DPM: one given the ground
truth value, termed DPM (GT); another with a value inflated by
20%, labeled DPM (+20%); and a third with a value reduced
by 20%, referred to as DPM (-20%). The DPM (GT) offers
a comparison against the best possible DPM while the others
provide a comparison against models that are more realistic.
While the choice of a 20% deviation is arbitrary, it serves to
emulate real-world scenarios where the exact value of the mo-
ment of inertia is unknown. Table II shows the RMSE, ϵmax,
ADE, and FDE for the DDM and DPM variants on Dtest
real. In simulation, our Deep Dynamics Model outperforms
all variants of the DPM by over 4 orders of magnitude in terms
of both RMSE and ϵmax on vx and 2 orders of magnitude for
vy and ω. On real data, DDM surpasses the DPM and its
variants in terms of RMSE and ϵmax by over 8% for vx, 56%
for vy, and 53% for ω in comparison to the best DPM. DDM’s
ability to predict velocities with high accuracy translates into
more precise future position predictions, as evidenced by its
lowest ADE, and FDE across both simulated and real data.
Even when given the ground-truth value of Iz, the DPM still
exhibited ADE and FDE nearly 2 orders of magnitude worse
for both metrics. The highest performing DPM on the real data
performed worse than the DDM as well, with 26% higher ADE
and 36% higher FDE.
The models were also compared (shown in Table III)
by examining their average Pacejka coefficient estimates to
evaluate generalization and alignment with physics i.e. coef-
ficients close to the true values indicate a model’s superior
dynamic representation and predictive performance on new
data. Known simulation coefficients provided a benchmark
Fig. 4. Timestamped trajectories for MPC run using estimated coefficients
from DPM (GT, +20, -20) and DDM in the vehicle dynamics simulator.
12.845 12.356
2033.892 23.873
5.763 -28.338 -1249.052 27.035
1109.978 49.836
11.739 12.335
-1.897 -0.790
0.5-2 100-10000
7.892 -1327.340
-1.051 15.426 0.777
-0.733 1938.432
COMPARISON OF ESTIMATED MODEL COEFFICIENTS
for the simulation data, while nominal coefficient ranges
informed the assessment for the real data. The DPM’s esti-
mated Pacejka coefficients for both simulation and real data
diverged significantly from anticipated values, being either an
order of magnitude different or contrary in sign. Conversely,
the DDM produced estimates closely matching ground-truth
values (highlighted in Table III) in simulation including accu-
rately gauging the vehicle’s moment of inertia Iz. Furthermore,
the Physics Guard layer ensured that the coefficients derived
real generalize to different track conditions in Dtest
from the Dtrain
E. Closed-Loop Testing
Closed-loop testing and comparison with DPM was per-
formed using the MPC implementation described in Sec-
tion IV-C. For DPM, a PID controller was used for throttle
control (as opposed to a sampling-based MPC controller in the
DPM paper). Figure 4 plots the time annotated traces for each
model. Racing-relevant metrics such as lap time (s), average
speed, and track boundary violations are reported in Table IV
for a single lap with an initial vx of 0.1m s−1. DDM results
in the fastest lap time of 5.38s while incurring 0 boundary
Lap Time (s) Average Speed (m/s) Track Violations
CLOSED-LOOP RACING ANALYSIS
REFERENCES
[1] Johannes Betz et al. Autonomous vehicles on the edge: A survey
IEEE Open Journal of Intelligent
on autonomous vehicle racing.
Transportation Systems, 3:458–488, 2022.
[2] Alexander Wischnewski et al. Indy autonomous challenge – autonomous
race cars at the handling limits, 2022.
[3] Matthew O’Kelly et al. F1/10: An open-source autonomous cyber-
physical platform. arXiv preprint arXiv:1901.08567, 2019.
[4] Juraj Kabzan, Lukas Hewing, Alexander Liniger, and Melanie N
Zeilinger. Learning-based model predictive control for autonomous
racing. IEEE Robotics and Automation Letters, 4(4):3363–3370, 2019.
[5] Hans B. Pacejka and Egbert Bakker. The magic formula tyre model.
Vehicle System Dynamics, 21(sup001):1–18, 1992.
[6] W. J. Langer and G. R. Potts. Development of a flat surface tire testing
machine. SAE Transactions, 89:1111–1117, 1980.
[7] Trent Weiss and Madhur Behl. Deepracing: A framework for au-
tonomous racing.
conference & exhibition (DATE), pages 1163–1168. IEEE, 2020.
In 2020 Design, automation & test
[8] Taekyung Kim, Hojin Lee, and Wonsuk Lee.
Physics embedded
neural network vehicle model and applications in risk-aware autonomous
driving using latent features, 2022.
[9] Matthias Althoff, Markus Koschi, and Stefanie Manzinger. Common-
road: Composable benchmarks for motion planning on roads. In 2017
IEEE Intelligent Vehicles Symposium (IV), pages 719–726, 2017.
[10] Chang Mook Kang, Seung-Hi Lee, and Chung Choo Chung. Compara-
tive evaluation of dynamic and kinematic vehicle models. In 53rd IEEE
Conference on Decision and Control, pages 648–653, 2014.
[11] Bernardo A. Hernandez Vicente, Sebastian S. James, and Sean R.
Anderson. Linear system identification versus physical modeling of
IEEE Transactions on Control
lateral–longitudinal vehicle dynamics.
Systems Technology, 29(3):1380–1387, 2021.
[12] Jullierme Emiliano Alves Dias, Guilherme Augusto Silva Pereira, and
Reinaldo Martinez Palhares. Longitudinal model
identification and
velocity control of an autonomous car. IEEE Transactions on Intelligent
Transportation Systems, 16(2):776–786, 2015.
[13] Chandrika Vyasarayani, Thomas Uchida, Ashwin Carvalho, and John
McPhee. Parameter identification in dynamic systems using the homo-
topy optimization approach. Lecture Notes in Control and Information
Sciences, 418:129–145, 01 2012.
[14] Achin Jain, Matthew O’Kelly, Pratik Chaudhari, and Manfred Morari.
BayesRace: Learning to race autonomously using prior experience. In
Proceedings of the 4th Conference on Robot Learning (CoRL), 2020.
[15] Juraj Kabzan, Lukas Hewing, Alexander Liniger, and Melanie N.
Zeilinger. Learning-based model predictive control for autonomous
racing. IEEE Robotics and Automation Letters, 4(4):3363–3370, 2019.
[16] Jingyun Ning and Madhur Behl. Scalable deep kernel gaussian process
for vehicle dynamics in autonomous racing. In 7th Annual Conference
on Robot Learning, 2023.
[17] Gabriel Costa, Jo˜ao Pinho, Miguel Ayala Botto, and Pedro U. Lima. On-
line learning of mpc for autonomous racing. Robotics and Autonomous
Systems, 167:104469, 2023.
[18] Nathan A. Spielberg et al. Neural network vehicle models for high-
performance automated driving. Science Robotics, 4(28), 2019.
[19] Grady Williams et al.
reinforcement learning.
Robotics and Automation (ICRA), pages 1714–1721, 2017.
Information theoretic mpc for model-based
In 2017 IEEE International Conference on
[20] Leonhard Hermansdorfer, Rainer Trauth, Johannes Betz, and Markus
Lienkamp. End-to-end neural network for vehicle dynamics modeling.
In 2020 6th IEEE Congress on Information Science and Technology
(CiSt), pages 407–412, 2020.
[21] Alexandra Baier, Zeyd Boukhers, and Steffen Staab. Hybrid physics and
deep learning model for interpretable vehicle state prediction. CoRR,
abs/2103.06727, 2021.
[22] Peng-Fei Xu et al. A physics-informed neural network for the prediction
of unmanned surface vehicle dynamics. Journal of Marine Science and
Engineering, 10(2), 2022.
[23] Amar Kulkarni, John Chrosniak, et al. Racecar–the dataset for high-
speed autonomous racing. arXiv:2306.03252, 2023.
[24] Jose Luis Olazagoitia, Jesus Perez, and Francisco Badea Romero.
Identification of tire model parameters with artificial neural networks.
Applied Sciences, 10:9110, 12 2020.
[25] B. Beckman. Physics of Racing Series. Stuttgart West, 1998.
[26] Alexandre Alahi et al. Social lstm: Human trajectory prediction in
In 2016 IEEE Conference on Computer Vision and
crowded spaces.
Pattern Recognition (CVPR), pages 961–971, 2016.
Fig. 5. A visualization of the trials run during hyperparameter tuning, with
the best DDM highlighted in yellow and the best DPM in orange.
violations, and achieving the highest average speed of over
2m s−1 (naively extrapolated to 311 km h−1 as this is a 1:43
scale simulation). The inference time for DDM measured on
a GeForce RTX 2080 Ti was approximately 700Hz, making
it suitable for real-time implementation.
F. Hyperparameter Tuning
To ensure a fair comparison, rigorous hyperparameter tuning
was conducted for both the DDM and DPM (shown in Figure
5). The learning rate, batch size, number of hidden layers,
size of hidden layers, presence of and number of layers
in the Gated Recurrent Unit (GRU), and the number of
historical timesteps, τ , were all considered hyperparameters.
Both models used the Mish activation function for the hidden
layers and were optimized using Adam. Hyperparameters were
tuned strategically using Optuna search. A validation set was
created using 20% of the training set chosen randomly, and
the DDM and DPM with the lowest validation loss were used
to generate our results. This procedure was repeated for both
real and simulation datasets.
